package com.boge.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.boge.entity.LocalAndRecomendBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_AND_RECOMEND_BOOK".
*/
public class LocalAndRecomendBookDao extends AbstractDao<LocalAndRecomendBook, Long> {

    public static final String TABLENAME = "LOCAL_AND_RECOMEND_BOOK";

    /**
     * Properties of entity LocalAndRecomendBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Path = new Property(1, String.class, "Path", false, "PATH");
        public final static Property Size = new Property(2, Long.class, "size", false, "SIZE");
        public final static Property BookId = new Property(3, String.class, "bookId", false, "BOOK_ID");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property LastChapter = new Property(6, String.class, "lastChapter", false, "LAST_CHAPTER");
        public final static Property IsLocal = new Property(7, Boolean.class, "isLocal", false, "IS_LOCAL");
        public final static Property HasUp = new Property(8, Boolean.class, "hasUp", false, "HAS_UP");
        public final static Property IsTop = new Property(9, Boolean.class, "isTop", false, "IS_TOP");
        public final static Property Location = new Property(10, Integer.class, "location", false, "LOCATION");
    }


    public LocalAndRecomendBookDao(DaoConfig config) {
        super(config);
    }
    
    public LocalAndRecomendBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_AND_RECOMEND_BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PATH\" TEXT," + // 1: Path
                "\"SIZE\" INTEGER," + // 2: size
                "\"BOOK_ID\" TEXT," + // 3: bookId
                "\"COVER\" TEXT," + // 4: cover
                "\"TITLE\" TEXT NOT NULL ," + // 5: title
                "\"LAST_CHAPTER\" TEXT," + // 6: lastChapter
                "\"IS_LOCAL\" INTEGER," + // 7: isLocal
                "\"HAS_UP\" INTEGER," + // 8: hasUp
                "\"IS_TOP\" INTEGER," + // 9: isTop
                "\"LOCATION\" INTEGER);"); // 10: location
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_AND_RECOMEND_BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalAndRecomendBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Path = entity.getPath();
        if (Path != null) {
            stmt.bindString(2, Path);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(3, size);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(4, bookId);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
        stmt.bindString(6, entity.getTitle());
 
        String lastChapter = entity.getLastChapter();
        if (lastChapter != null) {
            stmt.bindString(7, lastChapter);
        }
 
        Boolean isLocal = entity.getIsLocal();
        if (isLocal != null) {
            stmt.bindLong(8, isLocal ? 1L: 0L);
        }
 
        Boolean hasUp = entity.getHasUp();
        if (hasUp != null) {
            stmt.bindLong(9, hasUp ? 1L: 0L);
        }
 
        Boolean isTop = entity.getIsTop();
        if (isTop != null) {
            stmt.bindLong(10, isTop ? 1L: 0L);
        }
 
        Integer location = entity.getLocation();
        if (location != null) {
            stmt.bindLong(11, location);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalAndRecomendBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Path = entity.getPath();
        if (Path != null) {
            stmt.bindString(2, Path);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(3, size);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(4, bookId);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
        stmt.bindString(6, entity.getTitle());
 
        String lastChapter = entity.getLastChapter();
        if (lastChapter != null) {
            stmt.bindString(7, lastChapter);
        }
 
        Boolean isLocal = entity.getIsLocal();
        if (isLocal != null) {
            stmt.bindLong(8, isLocal ? 1L: 0L);
        }
 
        Boolean hasUp = entity.getHasUp();
        if (hasUp != null) {
            stmt.bindLong(9, hasUp ? 1L: 0L);
        }
 
        Boolean isTop = entity.getIsTop();
        if (isTop != null) {
            stmt.bindLong(10, isTop ? 1L: 0L);
        }
 
        Integer location = entity.getLocation();
        if (location != null) {
            stmt.bindLong(11, location);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalAndRecomendBook readEntity(Cursor cursor, int offset) {
        LocalAndRecomendBook entity = new LocalAndRecomendBook( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Path
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // size
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover
            cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastChapter
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isLocal
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // hasUp
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isTop
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // location
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalAndRecomendBook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSize(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBookId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.getString(offset + 5));
        entity.setLastChapter(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsLocal(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setHasUp(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsTop(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setLocation(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalAndRecomendBook entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalAndRecomendBook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalAndRecomendBook entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
